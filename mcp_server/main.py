# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:33:58+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, APIKeyQuery, BaseSecurity

from models import (
    FieldFormatGamesByDateDateGetResponse,
    FieldFormatGamesSeasonGetResponse,
    FieldFormatInjuredPlayersGetResponse,
    FieldFormatLeagueHierarchyGetResponse,
    FieldFormatPlayersGetResponse,
    FieldFormatPlayersTeamGetResponse,
    FieldFormatStadiumsGetResponse,
    FieldFormatTeamGameStatsByDateDateGetResponse,
    FieldFormatTeamGameStatsBySeasonSeasonTeamidNumberofgamesGetResponse,
    FieldFormatTeamScheduleSeasonTeamGetResponse,
    FieldFormatTeamSeasonStatsSeasonGetResponse,
    FieldFormatTeamsGetResponse,
    Format,
    Player,
    Season,
    Tournament,
)

app = MCPProxy(
    contact={'x-twitter': 'nfldata'},
    title='CBB v3 Scores',
    version='1.0',
    servers=[
        {'url': 'http://azure-api.sportsdata.io/v3/cbb/scores'},
        {'url': 'https://azure-api.sportsdata.io/v3/cbb/scores'},
    ],
)


@app.get(
    '/{format}/AreAnyGamesInProgress',
    description=""" Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none. """,
    tags=['game_status_checks'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def are_games_in_progress(format: Format = 'XML'):
    """
    Are Games In Progress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/CurrentSeason',
    tags=['season_schedule_management', 'league_information_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def current_season(format: Format = 'XML'):
    """
    Current Season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Games/{season}',
    tags=['season_schedule_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def schedules(format: Format = 'XML', season: str = ...):
    """
    Schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/GamesByDate/{date}',
    tags=['season_schedule_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def games_by_date(format: Format = 'XML', date: str = ...):
    """
    Games by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/InjuredPlayers',
    description=""" This endpoint provides all currently injured college basketball players, along with injury details. """,
    tags=['game_status_checks', 'player_statistics_lookup'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def injured_players(format: Format = 'XML'):
    """
    Injured Players
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/LeagueHierarchy',
    tags=['league_information_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def league_hierarchy(format: Format = 'XML'):
    """
    League Hierarchy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Player/{playerid}',
    tags=['player_statistics_lookup'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_player(format: Format = 'XML', playerid: str = ...):
    """
    Player Details by Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Players',
    tags=['player_statistics_lookup'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_active(format: Format = 'XML'):
    """
    Player Details by Active
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Players/{team}',
    tags=['player_statistics_lookup', 'team_performance_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_team(format: Format = 'XML', team: str = ...):
    """
    Player Details by Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Stadiums',
    tags=['venue_data_access'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def stadiums(format: Format = 'XML'):
    """
    Stadiums
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamGameStatsByDate/{date}',
    tags=['season_schedule_management', 'team_performance_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_game_stats_by_date(format: Format = 'XML', date: str = ...):
    """
    Team Game Stats by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}',
    description=""" Game by game log of total team statistics. """,
    tags=['season_schedule_management', 'team_performance_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_game_logs_by_season(
    format: Format = 'XML',
    season: str = ...,
    teamid: str = ...,
    numberofgames: str = ...,
):
    """
    Team Game Logs By Season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamSchedule/{season}/{team}',
    tags=['season_schedule_management', 'team_performance_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_schedule(format: Format = 'XML', season: str = ..., team: str = ...):
    """
    Team Schedule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamSeasonStats/{season}',
    tags=['season_schedule_management', 'team_performance_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_season_stats(format: Format = 'XML', season: str = ...):
    """
    Team Season Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Tournament/{season}',
    tags=['league_information_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def tournament_hierarchy(format: Format = 'XML', season: str = ...):
    """
    Tournament Hierarchy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/teams',
    tags=['season_schedule_management', 'team_performance_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def teams(format: Format = 'XML'):
    """
    Teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
